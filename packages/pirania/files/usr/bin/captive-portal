#!/bin/sh
# requires nftables and ipset


clean_tables () {
	echo "Cleaning captive-portal rules"
	nft flush chain inet pirania prerouting
	nft flush chain inet pirania input
	nft flush chain inet pirania forward
	nft delete table inet pirania
}

clean_sets () {
	ipset flush pirania-auth-macs
	ipset flush pirania-allowlist-ipv4
	ipset flush pirania-allowlist-ipv6
}

set_nftables () {
	echo "Apply captive-portal rules"

	append_nft_rules=$(uci get pirania.base_config.append_nft_rules 2> /dev/null)
	if [ "$append_nft_rules" = "1" ] ; then
		op="add rule"
	else
		op="insert rule"
	fi

	nft add table inet pirania
	nft add chain inet pirania prerouting { type nat hook prerouting priority 0 \; }
	nft add chain inet pirania input { type filter hook input priority 0 \; }
	nft add chain inet pirania forward { type filter hook forward priority 0 \; }

	# Redirect to pirania chain every packet from catch_interfaces
	for interface in $(uci get pirania.base_config.catch_bridged_interfaces); do
		nft $op inet pirania prerouting iifname $interface counter jump pirania
	done

	# stop processing the chain for authorized macs and allowed ips (so they are accepted)
	nft $op inet pirania prerouting meta l4proto tcp tcp dport 80 ip saddr @pirania-allowlist-ipv4 ip6 saddr @pirania-allowlist-ipv6 ether saddr @pirania-auth-macs counter redirect to :59080
	nft $op inet pirania prerouting meta l4proto udp udp dport 53 ip saddr @pirania-allowlist-ipv4 ip6 saddr @pirania-allowlist-ipv6 ether saddr @pirania-auth-macs counter redirect to :59053

	# And in there let's reject them with the best suited reject reason.
	nft $op inet pirania forward meta mark 0x66/0xff counter reject with tcp reset
	nft $op inet pirania forward meta mark 0x66/0xff counter reject
}

update_ipsets () {
	# using temporary ipset sets and swaping them so the update
	# implies minimal disturb to the network and a previous clean-up
	# is not needed
	ipset -exist create pirania-auth-macs hash:mac timeout 0
	ipset -exist create pirania-auth-macs-tmp hash:mac timeout 0
	for mac in $(pirania_authorized_macs) ; do
		ipset -exist add pirania-auth-macs-tmp $mac
	done
	ipset swap pirania-auth-macs-tmp pirania-auth-macs
	ipset destroy pirania-auth-macs-tmp

	for ipvX in ipv4 ipv6 ; do
		if [ "$ipvX" = "ipv4" ] ; then
			family=inet
		else
			family=inet6
		fi
		ipset -exist create pirania-allowlist-${ipvX} hash:net family $family
		ipset -exist create pirania-allowlist-${ipvX}-tmp hash:net family $family
		for item in $(uci get pirania.base_config.allowlist_$ipvX); do
			ipset -exist add pirania-allowlist-${ipvX}-tmp $item
		done
		ipset swap pirania-allowlist-${ipvX}-tmp pirania-allowlist-${ipvX}
		ipset destroy pirania-allowlist-${ipvX}-tmp
	done
}

# check if captive-portal is enabled in /etc/config/pirania
enabled=$(uci get pirania.base_config.enabled)

if  [ "$1" = "start" ]; then
	echo "Running captive-portal"
	clean_tables
	update_ipsets
	set_nftables
	exit
elif [ "$1" = "update" ] ; then
	update_ipsets
	exit
elif [ "$1" = "clean" ] || [ "$1" = "stop" ] ; then
	clean_tables
	clean_sets
	exit
elif [ "$enabled" = "1" ]; then
	clean_tables
	update_ipsets
	set_nftables
	exit
else
	echo "Pirania captive-portal is disabled. Try running captive-portal start"
	exit
fi
